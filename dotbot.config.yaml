---
- defaults:
    link:
      relative: true
      relink: true
      create: true
    shell:
      stdin: true
      stdout: true
      stderr: true

- shell:
  - description: Prepare Github Codespaces, so the rest can complete
    command: bin/gh-codespace-init

  - description: move history files (etc) to XDG_STATE_HOME
    command: bin/mv_state_files

- create:
  - ~/.cache
  - ~/.cache/npm
  - ~/.config
  - ~/.local
  - ~/.local/bin
  - ~/.local/share
  - ~/.local/state
  - ~/Documents
  - ~/Downloads
  - ~/bin
  - ~/src
  - ~/tmp

- create:
    ~/.ssh:
      mode: 0700
    ~/.ssh/config.d:
      mode: 0700

- clean:
  - "~"
  - "~/.config"
  - "~/.local"
  - "~/.local/bin"
  - "~/.local/share"
  - "~/.local/share/vim"
  - "~/.local/share/rbenv"
  - "~/.ssh"

- link:
    ~/.dotfiles: ''

    # When XDG is supported, place configuration files in ~/.config
    # Local overrides Defaults might be in ~/.config/app-local.conf files, or in
    # ~/.config/app.d/ dirs.)
    ~/.config:
      glob: true
      path: xdg_config_home/*

    # install packages, plugins etc in ~/.local/share
    # default configs may also be put here, with local overrides in ~/.config.
    ~/.local/share/:
      glob: true
      path: xdg_data_home/*
    ~/.local/share/rbenv/default-gems:

    # TODO: move to XDG_CONFIG_HOME
    ~/.gitconfig:

    # Otherwise, if an environment variable can set the path, set in shell init.
    # Only link in $HOME if neither XDG nor envvar config are supported.
    ~/.agignore:
    ~/.bash_logout:
    ~/.bash_profile:
    ~/.bashrc:
    ~/.profile:

    ~/.terminfo/:
      if: test -d terminfo  # run bin/dl-terminfo to populate this
      glob: true
      path: terminfo/**

    ~/.ssh/config:
      path: ssh/config

    # backwards compatible bootstrap, so I don't need to use $VIMINIT
    ~/.vimrc:
      path: xdg_data_home/vim/vimrc

- shell:
    - git submodule sync --recursive --quiet
    - git submodule update --init --recursive --depth 5

    - description: Update vim helptags
      quiet: true
      command: vim -e "+packload | helptags ALL | qall"

    - description: Install fzf
      quiet: true
      command: |
        ./xdg_data_home/vim/pack/ui-finders/start/fzf/install \
          --xdg --completion --key-bindings --no-update-rc

    - description: Update coc.nvim
      quiet: true
      command: |
        dir="xdg_data_home/vim/pack/compl_lint_lsp_etc/opt/coc.nvim"
        if [ -r "$dir"/package.json ]; then
          {
            cd "$dir"
            yarn install --frozen-lockfile
          }
        fi
